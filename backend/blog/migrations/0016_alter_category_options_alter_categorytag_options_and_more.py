# Generated by Django 4.2.7 on 2023-11-04 11:53

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


def convert_subcat_tag_to_subcategories_forward_func(apps, schema_editor):
    # create subcategories for each existing subcat tag
    # add subcategories to posts and also dropdownnavitems
    # nothing is deleted
    CategoryTag = apps.get_model("blog", "CategoryTag")
    TaggedWithCategoryTags = apps.get_model("blog", "TaggedWithCategoryTags")
    Post = apps.get_model("blog", "Post")
    Subcategory = apps.get_model("blog", "Subcategory")
    DropdownNavItem = apps.get_model("blog", "DropdownNavItem")

    for tag in CategoryTag.objects.filter(is_sub_category=True):
        subcategory = Subcategory.objects.create(
            name=tag.name,
            slug=tag.slug,
            description=tag.description,
            preview_image=tag.preview_image,
        )

        subcategory.categories.set(tag.categories.all())

        for post in Post.objects.filter(
            id__in=TaggedWithCategoryTags.objects.filter(tag_id=tag.id).values_list(
                "object_id", flat=True
            )
        ):
            post.subcategories.add(subcategory)

        for item in DropdownNavItem.objects.filter(category_tag=tag):
            item.subcategory = subcategory
            subcategory.categories.add(item.parent_nav_item.primary_category)
            item.save()


def add_default_tags_to_dropdownnavitems_backward_func(apps, schema_editor):
    # add default tags to dropdownnavitems
    CategoryTag = apps.get_model("blog", "CategoryTag")
    DropdownNavItem = apps.get_model("blog", "DropdownNavItem")

    for item in DropdownNavItem.objects.all():
        if item.category_tag:
            continue

        if item.subcategory:
            item.category_tag = (
                CategoryTag.objects.filter(name=item.subcategory.name).first()
                or CategoryTag.objects.first()
            )
            item.save()


class Migration(migrations.Migration):
    dependencies = [
        ("blog", "0015_post_description_alter_category_description_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="Subcategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        max_length=50,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="Please use only letters, numbers, underscores or hyphens; must be unique.",
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="250 characters long, will also be used in SEO description for the page",
                        max_length=250,
                    ),
                ),
                (
                    "preview_image",
                    models.ImageField(blank=True, upload_to="category_previews/"),
                ),
                (
                    "categories",
                    models.ManyToManyField(
                        related_name="subcategories", to="blog.category"
                    ),
                ),
            ],
            options={
                "verbose_name": "Subcategory",
                "verbose_name_plural": "Subcategories",
            },
        ),
        migrations.AddField(
            model_name="categorytag",
            name="subcategories",
            field=models.ManyToManyField(blank=True, to="blog.subcategory"),
        ),
        migrations.AddField(
            model_name="dropdownnavitem",
            name="subcategory",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                to="blog.subcategory",
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="subcategories",
            field=models.ManyToManyField(blank=True, to="blog.subcategory"),
        ),
        migrations.RunPython(
            convert_subcat_tag_to_subcategories_forward_func, migrations.RunPython.noop
        ),
        migrations.AlterModelOptions(
            name="category",
            options={
                "ordering": ["order"],
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
            },
        ),
        migrations.AlterModelOptions(
            name="categorytag",
            options={
                "ordering": ["name"],
                "verbose_name": "Tag",
                "verbose_name_plural": "Tags",
            },
        ),
        migrations.AlterModelOptions(
            name="dropdownnavitem",
            options={"ordering": ["order"]},
        ),
        migrations.RemoveField(
            model_name="category",
            name="group",
        ),
        migrations.RemoveField(
            model_name="category",
            name="show_in_menu",
        ),
        migrations.RemoveField(
            model_name="categorytag",
            name="is_sub_category",
        ),
        migrations.AlterField(
            model_name="dropdownnavitem",
            name="category_tag",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.SET_NULL,
                to="blog.categorytag",
                blank=True,
                null=True,
            ),
        ),
        migrations.RunPython(
            migrations.RunPython.noop,
            add_default_tags_to_dropdownnavitems_backward_func,
        ),
        migrations.RemoveField(
            model_name="dropdownnavitem",
            name="category_tag",
        ),
        migrations.AlterField(
            model_name="category",
            name="order",
            field=models.IntegerField(
                default=0,
                help_text="Enter an integer value to define the front page carousel section order.",
            ),
        ),
        migrations.AlterField(
            model_name="post",
            name="description",
            field=models.CharField(
                blank=True,
                help_text="Used for SEO, typically 60-150 chars long but up to 250 is fine. Title is used if left blank.",
                max_length=250,
            ),
        ),
    ]
