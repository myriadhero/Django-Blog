# Generated by Django 4.1.7 on 2023-04-03 13:54

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):
    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("blog", "0011_alter_category_options_alter_celebritytag_options_and_more"),
    ]

    operations = [
        migrations.CreateModel(
            name="CategoryTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(max_length=100, unique=True, verbose_name="name"),
                ),
                (
                    "slug",
                    models.SlugField(
                        allow_unicode=True,
                        max_length=100,
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
            ],
            options={
                "verbose_name": "Category tag",
                "verbose_name_plural": "Category tags",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="TaggedWithCategoryTags",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "object_id",
                    models.IntegerField(db_index=True, verbose_name="object ID"),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_tagged_items",
                        to="contenttypes.contenttype",
                        verbose_name="content type",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_tags",
                        to="blog.categorytag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.RemoveField(
            model_name="taggedwithcelebrities",
            name="content_type",
        ),
        migrations.RemoveField(
            model_name="taggedwithcelebrities",
            name="tag",
        ),
        migrations.RemoveField(
            model_name="category",
            name="is_celebrity_tags",
        ),
        migrations.RemoveField(
            model_name="post",
            name="celebrities",
        ),
        migrations.AddField(
            model_name="category",
            name="is_tag_list",
            field=models.BooleanField(
                default=False,
                help_text="If enabled, this category will show a list of tags first instead of posts+tag filters.",
            ),
        ),
        migrations.DeleteModel(
            name="CelebrityTag",
        ),
        migrations.DeleteModel(
            name="TaggedWithCelebrities",
        ),
        migrations.AddField(
            model_name="categorytag",
            name="categories",
            field=models.ManyToManyField(blank=True, to="blog.category"),
        ),
        migrations.AlterField(
            model_name="post",
            name="tags",
            field=taggit.managers.TaggableManager(
                help_text="Category tags, comma separated",
                through="blog.TaggedWithCategoryTags",
                to="blog.CategoryTag",
                verbose_name="Category tags",
            ),
        ),
    ]
